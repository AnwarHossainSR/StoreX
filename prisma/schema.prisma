generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  file_id   String
  url       String
  userId    String?  @db.ObjectId
  shopsId   String?  @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId String?  @db.ObjectId
  users     users[]
  shops     shops[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model users {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String            @unique
  password          String?
  points            Int               @default(0)
  phone             String?
  country           String?
  following         String[]          @db.ObjectId
  avatarId          String?           @db.ObjectId
  avatar            images?           @relation(fields: [avatarId], references: [id], onDelete: SetNull)
  stripeCustomerId  String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  shopReviews       shopReviews[]
  userAnalytics     userAnalytics?
  shippingAddresses ShippingAddress[]
  Order             Order[]
  notifications     notifications[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopsId   String   @db.ObjectId
  shops     shops    @relation(fields: [shopsId], references: [id], onDelete: Cascade)
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shops {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  shopCode            String                @unique
  bio                 String?
  category            String
  avater              images?               @relation(fields: [imagesId], references: [id])
  coverBanner         String?
  address             String
  opening_hour        String
  website             String?
  social_links        Json[]
  ratings             Float                 @default(0)
  reviews             shopReviews[]
  sellerId            String                @unique @db.ObjectId
  sellers             sellers               @relation(fields: [sellerId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Product             Product[]
  imagesId            String?               @db.ObjectId
  productAnalytics    productAnalytics[]
  Order               Order[]
  PaymentDistribution PaymentDistribution[]
}

model sellers {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String                @unique
  phone_number        String
  country             String
  password            String
  stripeId            String?
  currency            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  shop                shops?
  Product             Product[]
  PaymentDistribution PaymentDistribution[]
  DiscountCode        DiscountCode[]
  notifications       notifications[]
}

model siteConfig {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DiscountCode {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  // sellers       sellers  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sellers       sellers? @relation(fields: [sellersId], references: [id])
  sellersId     String?  @db.ObjectId
}

enum ProductStatus {
  Active
  Pending
  Draft
  Deleted
}

model Product {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String            @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  totalSales            Int               @default(0)
  ratings               Float             @default(5)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json?
  isDeleted             Boolean           @default(false)
  cashOnDelivery        Boolean           @default(false)
  discount_codes        String[]          @db.ObjectId
  status                ProductStatus     @default(Pending)
  deletedAt             DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  shopId                String            @db.ObjectId
  Shop                  shops             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  sellerId              String            @db.ObjectId
  Sellers               sellers           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images                images[]
  productAnalytics      productAnalytics?
  OrderItem             OrderItem[]
}

model userAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastVisited DateTime
  actions     Json[]
  country     String?
  city        String?
  region      String?
  latitude    Float?
  longitude   Float?
  ip          String?
  device      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique @db.ObjectId
  shopId       String?  @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  shop         shops?   @relation(fields: [shopId], references: [id], onDelete: SetNull)
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishListAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ShippingAddress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String?
  address    String
  city       String?
  state      String?
  postalCode String?
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  userId     String   @db.ObjectId
  user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order[]
}

model Order {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  orderId             String                @unique
  userId              String                @db.ObjectId
  shopId              String                @db.ObjectId
  total               Float
  status              String
  shippingAddressId   String?               @db.ObjectId
  couponCode          String?
  discountAmount      Float                 @default(0)
  paymentIntentId     String?
  paidAt              DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  user                users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop                shops                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shippingAddress     ShippingAddress?      @relation(fields: [shippingAddressId], references: [id], onDelete: SetNull)
  items               OrderItem[]
  PaymentDistribution PaymentDistribution[]
}

model OrderItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String   @db.ObjectId
  quantity        Int
  price           Float
  selectedOptions Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PaymentDistribution {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentId       String   @unique // e.g., PAY-SABC-25-000001
  orderId         String   @db.ObjectId
  shopId          String   @db.ObjectId
  sellerId        String   @db.ObjectId
  amount          Float
  platformFee     Float
  paymentIntentId String
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  shop            shops    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  seller          sellers  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model notifications {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data like orderId, amount, etc.
  isRead    Boolean          @default(false)
  sellerId  String?          @db.ObjectId
  userId    String?          @db.ObjectId
  seller    sellers?         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  user      users?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum NotificationType {
  ORDER_RECEIVED
  PAYMENT_RECEIVED
  ORDER_CANCELLED
  ORDER_REFUNDED
  PRODUCT_APPROVED
  PRODUCT_REJECTED
  ACCOUNT_VERIFIED
  PAYOUT_PROCESSED
  LOW_STOCK
  REVIEW_RECEIVED
}
