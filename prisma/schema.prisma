generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  file_id   String
  url       String
  userId    String?  @db.ObjectId // No @unique
  shopsId   String?  @db.ObjectId // No @unique
  Product   Product? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId String?  @db.ObjectId
  users     users[]
  shops     shops[]
}

model users {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String            @unique
  password          String?
  points            Int               @default(0)
  following         String[]
  avatar            images?           @relation(fields: [imagesId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  shopReviews       shopReviews[]
  imagesId          String?           @db.ObjectId
  userAnalytics     userAnalytics?
  shippingAddresses ShippingAddress[]
  Order             Order[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String?  @unique @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model shops {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  bio              String?
  category         String
  avater           images?            @relation(fields: [imagesId], references: [id])
  coverBanner      String?
  address          String
  opening_hour     String
  website          String?
  social_links     Json[]
  ratings          Float              @default(0)
  reviews          shopReviews[]
  sellerId         String             @unique @db.ObjectId
  sellers          sellers            @relation(fields: [sellerId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Product          Product[]
  imagesId         String?            @db.ObjectId
  productAnalytics productAnalytics[]
  Order            Order[]
}

model sellers {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  currency     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  shopId       String?   @db.ObjectId
  shopsId      String?   @db.ObjectId
  shop         shops?
  Product      Product[]
}

// siteCOnfig

model siteConfig {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model DiscountCode {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// products

enum ProductStatus {
  Active
  Pending
  Draft
  Deleted
}

model Product {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String            @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  totalSales            Int               @default(0)
  ratings               Float             @default(5)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean           @default(false)
  cashOnDelivery        Boolean?
  discount_codes        String[]          @db.ObjectId
  status                ProductStatus     @default(Pending)
  deletedAt             DateTime?         @updatedAt
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  shopId                String            @db.ObjectId
  Shop                  shops             @relation(fields: [shopId], references: [id])
  sellerId              String            @db.ObjectId
  Sellers               sellers           @relation(fields: [sellerId], references: [id])
  productAnalytics      productAnalytics?
  OrderItem             OrderItem[]
}

model userAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  lastVisited DateTime
  actions     Json[] // Array of objects containing productId, action, shopId, timestamp (as ISO string)
  country     String?
  city        String?
  region      String?
  latitude    Float?
  longitude   Float?
  ip          String?
  device      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        users    @relation(fields: [userId], references: [id])
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique @db.ObjectId
  shopId       String?  @db.ObjectId
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishListAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id])
  shop         shops?   @relation(fields: [shopId], references: [id])
}

model ShippingAddress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String
  city       String
  state      String?
  postalCode String?
  country    String?
  phone      String?
  isDefault  Boolean  @default(false)
  userId     String   @db.ObjectId
  user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order[]
}

model Order {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  userId            String           @db.ObjectId
  shopId            String           @db.ObjectId
  total             Float
  status            String
  shippingAddressId String?          @db.ObjectId
  couponCode        String?
  discountAmount    Float            @default(0)
  paymentIntentId   String?
  paidAt            DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop              shops            @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id], onDelete: SetNull)
  items             OrderItem[]
}

model OrderItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String   @db.ObjectId
  quantity        Int
  price           Float
  selectedOptions Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
